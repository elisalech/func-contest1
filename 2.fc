{-

TASK 2 - PROXY.

The aim of proxy contract is to forward all messages to it's owner.

In particular for each message A (except messages from owner itself) such contract
should send the message B to owner with body which contains address of A's sender followed by A's message body in reference (child cell).

The Toncoin value attached to the message should be equal A's value minus fees related to processing (computational and message forwarding fees).
The owner address is stored in contract storage (it is guaranteed that storage contains owner address only).

You may find useful https://ton.org/docs/#/smart-contracts/messages

For messages from owner tests will check absence of outgoing messages.

-}

int equal_slices (slice a, slice b) asm "SDEQ";

slice load_data () impure inline_ref {
  slice ds = get_data().begin_parse();
  slice address = ds~load_msg_addr();

  return address;
}

;; No need to save owner_address because it won't change
;; () save_data (slice owner_address) impure {
;;   set_data(begin_cell().store_slice(owner_address).end_cell());
;; }

;; Parse sender address from incoming message
(slice, int) parse_sender_address (cell in_msg_full) impure inline_ref {
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();

  return (sender_address, flags);
}

;; testable
() recv_internal (int balance, int msg_value, cell in_msg_full, slice in_msg_body) {
  (slice sender_address, int flags) = parse_sender_address(in_msg_full);
  slice owner_address = load_data();

  ifnot (equal_slices(sender_address, owner_address)) {
      cell payload = begin_cell().store_slice(in_msg_body).end_cell();
      builder msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(sender_address)
        .store_grams(msg_value)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_slice(sender_address)
        .store_ref(payload);

      send_raw_message(msg.end_cell(), 0x64);
  }
}
