{-

TASK 4 - HASHMAP STORAGE.

* Add-new-entry message has the following structure:
    * 32-bit unsigined `op` equal to 1
    * 64-bit unsigned `query_id`
    * 256-bit unsgined key
    * 64-bit `valid_until` unixtime
    * the rest slice is the value

    Upon receipt of such a message, the contract must add a new key/value entry to its data.
    Clarification: if the key already exists then the entry must be replaced.
    Contract storage format is arbitrary, you are free to change it.

* Remove-outdated message has the following stucture:
    * 32-bit unsigined `op` equal to 2
    * 64-bit unsigned `query_id`

    Upon receipt of such a message, the contract must delete all otudated entries from its data (those with `valid_until` < now()). Note, tests will not cover cases when messages contain valid `op=2`, `query_id` and then something else (that means that participants may handle such messages at their discretion).

* For all other internal messages an error (exit_code > 1) should be thrown

* Get-method `get_key` accepts 256-bit unsignied key and should return `valid_until` integer and value data slice for this key. Note: unixtime of running `get_key` method should not affect result.

  If there is no entry for this key then an error (exit_code > 1) should be thrown.

* Tests will initially run with empty storage

-}

(cell) load_data() inline_ref {
  slice ds = get_data().begin_parse();

  return ds.slice_bits() ? ds.preload_dict() : new_dict();
}

() save_data(cell data_dict) impure inline_ref {
  set_data(begin_cell().store_dict(data_dict).end_cell());
}

;; testable
() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) {
  (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));
  cell data_dict = load_data();

  if (op == 1) { ;; add new entry
    int key = in_msg_body~load_uint(256);
    int valid_until = in_msg_body~load_uint(64);

    slice value = begin_cell().store_uint(valid_until, 64).store_slice(in_msg_body).end_cell().begin_parse();

    var (_, f) = data_dict.udict_get?(256, key);

    if (f) {
      data_dict~udict_replace?(256, key, value);
    } else {
      data_dict~udict_set(256, key, value);
    }

    save_data(data_dict);
  } elseif (op == 2) { ;; remove outdated
    int key = -1;
      do {
        (key, slice cs, int f) = data_dict.udict_get_next?(256, key);
        if (f) {
          int valid_until = cs.preload_uint(64);
          if (valid_until < now()) {
            data_dict~udict_delete?(256, key);
          }
        }
      } until (~ f);
    save_data(data_dict);
  } else {
    ;; For all other internal messages an error should be thrown
    throw(666);
  }
}

;; testable
(int, slice) get_key(int key) method_id {
  (cell data_dict) = load_data();

  (slice data, int data_found) = data_dict.udict_get?(256, key);

  ;;  If there is no entry for this key then an error should be thrown.?
  throw_unless(667, data_found);

  int valid_until = data~load_uint(64);
  return (valid_until, data);
}
