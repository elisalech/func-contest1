{-

TASK 5 - SHARED WALLET.

The aim of two owner wallet is to create smart-contract which send messages then and only then both owners (represented by public keys) authorized it.

TL-B schema of external message body accepted by wallet is as follows:
```
request#_
    valid_until:uint32
    mode:uint8
    msg_to_send:^Cell
    = Request;

mdg_body#_
    public_key:uint256
    signature:(512 * Bit)
    request:^Request
    = MsgBody;
```

Where `signature` signs `Request` cell with some private key and `public_key` is corresponding public key.

`msg_to_send` is fully formed message which is ready to be accepted by `send_raw_message()`.

Any errors related to the incorrect `msg_to_send` may be ignored (in other words if something goes wrong due to owner's malformed message, it is owner's problem).

When wallet receive request signed by one owner it should store it in storage.

When wallet receives the same request signed by another owner it should process request, that means send `msg_to_send` with `mode` in the same transaction it got second signature.

If 
  ?! message body does not corresponds to `MsgBody` type described above, 
  ! request is signed not by owner, 
  ! contains incorrect signature or current time is higher than `valid_until`, 
  
  -> request should be ignored (message should not be accepted). 
  
Note: absence of `accept_message` and throwing (with exit_code > 1) before `accept_message` are the same for external messages (since will result in ignoring that external message by any validator).

! If request is signed not by owner, contains incorrect signature or current time is higher than `valid_until`, request should be ignored (message should not be accepted).

If the same request (regardless approved by one or both owners) is sent the second time it should be ignored.

! It is acceptable to ignore requests which are valid for more than 1 minute as well as not accept more than 10 requests per minute.

Before running tests, storage for contract will be generated by `pack_data` with providing two public keys. Thus participants may intoduce their own storage layout.

-}


int equal_slices (slice a, slice b) asm "SDEQ";

;; testable
cell pack_data(int public_key1, int public_key2) method_id {
  cell data = begin_cell()
    .store_uint(public_key1, 256)
    .store_uint(public_key2, 256)
    .store_dict(new_dict())
    .end_cell();

  return data;
}

(int, int, cell) load_data() impure inline_ref {
  var data = get_data().begin_parse();
  return (data~load_uint(256), data~load_uint(256), data.preload_dict());
}

(int, slice, cell) unpack_data(slice msg_data) inline_ref {
  int public_key = msg_data~load_uint(256);
  slice signature = msg_data~load_bits(512);
  cell request = msg_data.preload_ref();

  return (public_key, signature, request);
}

;;     valid_until:uint32
;;     mode:uint8
;;     msg_to_send:^Cell
(int, int, cell) unpack_request(cell request_cell) inline_ref {
  slice request_slice = request_cell.begin_parse();

  int valid_until = request_slice~load_uint(32);
  int mode = request_slice~load_uint(8);
  cell msg_to_send = request_slice.preload_ref();

  return (valid_until, mode, msg_to_send);
}

() recv_internal () {
	;; Do nothing for internal messages
}

;; testable
() recv_external (slice in_msg_body) {
	var (int public_key, slice signature, cell request) = unpack_data(in_msg_body);
  var (int valid_until, int mode, cell msg_to_send) = unpack_request(request);

  ;; Check time validity 
  throw_if(35, valid_until < now() | ((valid_until - now()) > 60));

  int request_hash = cell_hash(request);
  ;; Validate signature
  throw_unless(37, check_signature(request_hash, signature, public_key));

  var (int public_key1, int public_key2, cell requests_dict) = load_data();
  int sent_by_first = public_key == public_key1;
  int sent_by_second = public_key == public_key2;

  ;; Check if msg was not sent by any of the owners
  throw_unless(90, sent_by_first | sent_by_second);

  var (slice request_record, int found) = requests_dict.udict_get?(256, request_hash);

  if (found) {
    var (int first_approved, int second_approved) = (request_record~load_uint(1), request_record~load_uint(1));

    ;; If the same request (regardless approved by one or both owners) is sent the second time it should be ignored.
    throw_if(91, (first_approved & sent_by_first) | (second_approved & sent_by_second));

    accept_message();

    int both_approved = (first_approved & sent_by_second) | (second_approved & sent_by_first);
    if (both_approved) {
      send_raw_message(msg_to_send, mode);
      requests_dict.udict_delete?(256, request_hash);  
    } else {
      slice replaced_record = begin_cell()
        .store_uint((sent_by_first ? 1 : first_approved), 1)
        .store_uint((sent_by_second ? 1 : second_approved), 1)
        .end_cell()
        .begin_parse();

      requests_dict~udict_replace?(256, request_hash, replaced_record);  
    }
    set_data(begin_cell()
      .store_uint(public_key1, 256)
      .store_uint(public_key2, 256)
      .store_dict(requests_dict)
      .end_cell()
    );

  } else {
	  accept_message();

    slice new_record = begin_cell()
      .store_uint((sent_by_first ? 1 : 0), 1)
      .store_uint((sent_by_second ? 1 : 0), 1)
      .end_cell()
      .begin_parse();

    requests_dict~udict_set(256, request_hash, new_record);

    set_data(begin_cell()
      .store_uint(public_key1, 256)
      .store_uint(public_key2, 256)
      .store_dict(requests_dict)
      .end_cell()
    );
  }
}
